set nocompatible              " be iMproved, required
filetype off                  " required
set ff=unix

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'dracula/vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sensible'
Plugin 'phleet/vim-mercenary'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'junegunn/fzf'
Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'
Plugin 'mattn/emmet-vim'
" Plugin 'yggdroot/indentline'
Plugin 'itchyny/lightline.vim'
Plugin 'davidhalter/jedi-vim'

Plugin 'hdima/python-syntax'
" Plugin 'pangloss/vim-javascript'
" Plugin 'isRuslan/vim-es6'
Plugin 'chemzqm/vim-jsx-improve'
Plugin 'mxw/vim-jsx'
Plugin 'glench/vim-jinja2-syntax'
" Plugin 'xolox/vim-session'
Plugin 'drewtempelmeyer/palenight.vim'
Plugin 'xero/blaquemagick.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

let g:indentLine_char = '‚ñè'

let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ }
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|venv\|build\|app_bundles'

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
:set noshowmode
:set tabstop=2
:set shiftwidth=2
:set expandtab

:set ff=unix 

" Custom
:let mapleader=","
:map <F2> :echo 'Current time is ' . strftime('%c')<CR>
:map cnt :tabnew<CR>


function! NumberToggle()
  if (&relativenumber == 1 && &number == 1)
    set nonumber
    set norelativenumber
  elseif (&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

function! MarkerToggle()
  if (&cursorline == 1 && &cursorcolumn == 1)
    set nocursorline
    set nocursorcolumn
  elseif (&cursorline == 1)
    set cursorcolumn
  else
    set cursorline
  endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>
nnoremap <C-m> :call MarkerToggle()<cr>

:au FocusLost * :set number | :set norelativenumber
:au FocusGained * :set relativenumber | :set number

autocmd InsertEnter * :set number | :set norelativenumber
autocmd InsertLeave * :set relativenumber | :set number

colo evening

set path=$PWD/**
set wildmenu
set wildmode=list:longest,full

" fzf
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <M-l> :call fzf#run({
\   'source':  reverse(<sid>buflist()),
\   'sink':    function('<sid>bufopen'),
\   'options': '+m',
\   'down':    len(<sid>buflist()) + 2
\ })<CR>

command! Buffers call fzf#run(fzf#wrap(
    \ {'source': map(range(1, bufnr('$')), 'bufname(v:val)')}))

set rtp+=~/.fzf
if executable('fzf')
  " FZF {{{
  " call fzf#run(fzf#wrap({'source': 'git ls-files --exclude-standard --others --cached'}))

  " Use fuzzy completion relative filepaths across directory
  imap <expr> <c-x><c-f> fzf#vim#complete#path('git ls-files $(git rev-parse --show-toplevel)')
  
  " <C-p> or <C-t> to search files
  nnoremap <silent> <C-t> :FZF -m<cr>
  nnoremap <silent> <C-p> :FZF -m<cr>

  " <M-p> for open buffers
  nnoremap <silent> <M-p> :Buffers<cr>

  " <M-S-p> for MRU
  nnoremap <silent> <M-S-p> :History<cr>

  " Better command history with q:
  command! CmdHist call fzf#vim#command_history({'right': '40'})
  nnoremap q: :CmdHist<CR>

  " Better search history
  command! QHist call fzf#vim#search_history({'right': '40'})
  nnoremap q/ :QHist<CR>

  command! -bang -nargs=* Ack call fzf#vim#ag(<q-args>, {'down': '40%', 'options': --no-color'})
  " }}}
else
  Plugin 'kien/ctrlp.vim'
end

" colors
" set background=dark
" colorscheme blaquemagick
" let g:lightline.colorscheme = 'blaquemagick'
" let g:palenight_terminal_italics=1
syntax on
color dracula
hi Normal ctermbg=none
hi NonText ctermbg=none
